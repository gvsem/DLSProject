from typing import Tuple

import os
import base64

import warnings
from werkzeug.utils import secure_filename
from flask import (
    Flask,
    flash,
    request,
    redirect,
    Response,
    make_response,
    send_from_directory
)

import torch
import torchvision
import cv2
import numpy as np


UPLOAD_FOLDER = 'UPLOAD_FOLDER'


model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True)

def plot_predictions(numpy_img, predictions, color=(255, 0, 0)):
    boxes = predictions['boxes'].detach().numpy()

    warnings.filterwarnings("ignore")

    with warnings.catch_warnings():
        warnings.simplefilter("ignore")

        for box in boxes:

            numpy_img = cv2.rectangle(
                np.array(numpy_img),
                (int(box[0]), int(box[1])),
                (int(box[2]), int(box[3])),
                (color[2], color[1], color[0]),
                2
            )

    return numpy_img


def ml_detect_img(model, img_path, conf_trhres=0.8, color=(255, 0, 255)):

    model = model.eval()
    img_numpy = cv2.imread(img_path)  # [:,:,::-1]
    img = torch.from_numpy(img_numpy.copy().astype('float32')).permute(2, 0, 1)
    img = img / 255.0

    predictions = model(img[None, ...])
    # print(predictions[0]['labels'])
    boxes = predictions[0]['boxes'][
        (predictions[0]['scores'] > conf_trhres)
        & (predictions[0]['labels'] == 1)
    ]

    boxes_dict = {}
    boxes_dict['boxes'] = boxes

    # np.array(open(img_path, 'rb').read())
    img_with_boxes = plot_predictions(img_numpy, boxes_dict, color)
    return img_with_boxes  # .astype('uint')


def upload_file():
    if request.method == 'POST':
        INPUT_NAME = 'img'
        if INPUT_NAME not in request.files:
            flash('No file part')
            print('no file part')
            return redirect(request.url)
        file = request.files[INPUT_NAME]
        if file.filename == '':
            flash('No selected file')
            print('no sel part')
            return redirect(request.url)
        if file:
            filename = secure_filename(file.filename)
            filepath = os.path.join(app.config[UPLOAD_FOLDER], filename)
            file.save(filepath)
            return filepath


def get_file_content(filename, mode='r', charset='utf-8'):
    def root_directory():
        return os.path.abspath(os.path.dirname(__file__))

    src = os.path.join(root_directory(), filename)
    with open(src, mode, encoding=charset) as file:
        return file.read()




@app.route('/')
def index():
    content = get_file_content('static/index.html')
    return Response(
        content,
        mimetype="Content-Type: text/html; charset=utf-8"
    )


@app.route('/<path:path>')
def js(path):
    print(path)
    return send_from_directory('./static', path)


@app.route('/detect-img', methods=['POST'])
def detect_img():
    filepath = upload_file()

    if not isinstance(filepath, str):
        return filepath

    threshold = int(request.values.get('threshold')) / 100.0
    color = hexToRGB(request.values.get('color'))

    image_with_boxes = ml_detect_img(model, filepath, threshold, color)
    cv2.imwrite(os.path.join(
        app.config[UPLOAD_FOLDER], 'response.jpg'), image_with_boxes)

    with open('./tmp/response.jpg', 'rb') as reponse_image:
        return make_response(base64.b64encode(reponse_image.read()))
